cd R
pwd
list.files("R")
andy <- read.csv(R/Andy.csv")")
andy <- read.csv("R/Andy.csv")
length(andy$Day)
dil(Day)
dim(andy)
str(andy)
summary(andy)
names(andy)
andy[1, "Weight""]
andy[1, "Weight"]
andy[1, "Weight"]
andy[1, "Weight"]
andy[30, "Weight"]
andy[which(andy$Day == 30), "Weight"]
subset(andy$Weight, andy$Day==30)
andy_start <- andy[1, "Weight"]
andy_end <- andy[30, "Weight"]
andy_loss <- andy_start - andy_end
andy_loss
files <- list.files("R")
files
fiels[1]4
files[1]
files[2]
files[2:5]
head(read.csv(files[3]))
head(read.csv(files[3]))
files_full <- list.files("R", full.names=TRUE)
files_full
head(read.csv(files_full[3]))
andy_david <- rbind(andy, read.csv(files_full[2]))
head(andy_david)
tail(andy_david)
day_25 <- andy_david[which(andy_david$Day == 25), ]
day_25
for (i in 1:5) {print(i)}
for (i in 1:5) {
dat <- rbind(dat, read.csv(files_full[i]))
}
dat <- data.frame()
for (i in 1:5) {
dat <- rbind(dat, read.csv(files_full[i]))
}
str(dat)
median(dat$Weight)
median(dat$Weight, na.rm=TRUE)
dat_30 <- dat[which(dat[, "Day"] == 30),]
dat_30
median(dat_30$Weight)
swirl()
library(swirl)
swirl()
library(dplyr)
cran <-tbl_df(mydf)
mydf
rm(mydf)
rm("mydf")
cran
?group_by()
info()
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package)
summarize(by_package,mean(size))
submit()
pack_sum <- summarize(by_package,
count = ,
unique = ,
countries = ,
avg_bytes = )
reset()
pack_sum <- summarize(by_package,
count = n(),
unique = n_distinct(ip_id),
countries = n_distinct(country),
avg_bytes = mean(size))
submit()
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum,count > 679)
top_counts
View(top_counts)
top_counts-sorted <- arrange(count,desc(count))
top_counts-sorted <- arrange(top_counts,desc(count))
top_counts_sorted <- arrange(top_counts,desc(count))
Views(top_counts_sorted)
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99).
quantile(pack_sum$unique,probs = 0.99).
quantile(pack_sum$unique,probs = 0.99)
top_unique <- filter(pack_sum,unique>465)
View(top_unique)
top_unique_sorted <- arrange(top_unique,desc(unique))
View(top_unique_sorted)
commit()
submit()
submit()
submit()
View(result3)
cran %>%
select() %>%
print
cran
cran %>%
select(ip_id,country,package,size) %>%
print cran
cran %>%
select(ip_id,country,package,size) %>%
print (cran)
cran %>%
select(ip_id,country,package,size) %>%
print (cran)%>%
cran %>%
select(ip_id,country,package,size) %>%
print (cran)
cran %>%
select(ip_id,country,package,size) %>%
print(cran)
print()
print cran
cran %>%
select(ip_id,country,package,size) %>%
print (cran)
submit()
commit()
submit()
cran %>%
select(ip_id, country, package, size) %>%
mutate(cran, size_mb = size/2^20)
print(cran)
cran %>%
select(ip_id, country, package, size) %>%
mutate(cran, size_mb = size/2^20) %>%
print(cran)
print (cran)
cran %>%
select(ip_id, country, package, size) %>%
print(cran)
mutate(cran, size_mb = size/2^20) %>%
print(cran)
submit()
submit()
submit()
mutate(size_mb = size / 2^20)
submit()
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(students2,sex_class,count)
res <- gather(students2,sex_class,count, -grade)
res
.seperate
?seperate
??seperate
?separate
separate(res, sex_class,c("sex", "class"))
submit()
submit()
submit()
submit()
students2 %>%
gather( students2,sex_class,count, -grade ) %>%
print (students2)
gather( students2,sex_class,count) %>%
print (students2)
submit()
reset()
submit()
students2
submit()
submit()
submit()
submit()
submit()
##Loading and preprocessing the data
##Set Working dir
setwd ("\\\\UPLCI084736/USERS$/gjf510/MyCloudDrive/Documents/Coursera/RepData_PeerAssessment1")
##Set local language to English (to use English Names)
Sys.setlocale("LC_TIME", "English")
act <- read.csv("activity.csv", header=TRUE, sep=",", skip = 0)
##Process the data
##Convert date to a Date class
act$date <- as.Date(act$date)
##Filter data where complete cases = TRUE
compl_act <- subset(act,complete.cases(act)==TRUE)
##Group by day
compl_act_day <- split(compl_act, compl_act$date)
#What is the total number of steps taken per day?
totsteps <- sapply(compl_act_day,function(x) sum(x$steps))
##Create a Histogram of the total number of steps during each day
hist(totsteps, main="Total steps per day",xlab="Total steps", ylab="Frequency")
#What is mean total number of steps taken per day?
round(mean(totsteps))
median(totsteps)
#What is the average daily activity pattern?
compl_act <- subset(act,complete.cases(act)==TRUE)
##Split by interval
compl_act_int <- split(compl_act, compl_act$interval)
##Create Average
int_average <- sapply(compl_act_int,function(x) mean(x$steps))
##Create the plot
plot(int_average,type="l",ylab="Average Steps",xlab="5-Minute Interval",main="5-Minute Time Series Plot")
##Print the interval with the max steps
names(which.max(int_average))
#Imputing missing values
##Count incomplete cases
compl <- complete.cases(act)
fulldata <- cbind(act,compl)
fulldatasplit <- split(fulldata,fulldata$compl)
##Fill all NA with the average of
install.packages("Hmisc")
library(Hmisc)
#fulldata$imputed_steps <- with(fulldata, impute(steps, mean))
fulldata$steps <- with(fulldata, impute(steps, mean))
#Are there differences in activity patterns between weekdays and weekends?
act$day <- weekdays(act$date)
for (i in 1:nrow(act)) {
if(act[i,]$day %in% c("Saturday","Sunday")) {
act[i,]$day <-"Weekend"
}
else{
act[i,]$day <- "Weekday"
}
}
act_int <- split(act, act$interval)
act_int
act_average <- sapply(act_int,function(x) mean(x$steps))
